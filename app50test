import streamlit as st
from streamlit_webrtc import webrtc_streamer, WebRtcMode, RTCConfiguration
import cv2
import numpy as np
from PIL import Image, ImageDraw
from ultralytics import YOLO
import av
import threading
import os

st.set_page_config(page_title="Live Tablet Counter", layout="wide")

# WebRTC Configuration for cloud deployment
RTC_CONFIGURATION = RTCConfiguration({
    "iceServers": [
        {"urls": ["stun:stun.l.google.com:19302"]},
        # Add TURN servers for better connectivity if needed
    ]
})

# Global variables for thread-safe model access
lock = threading.Lock()
tablet_count_global = 0

@st.cache_resource
def load_model():
    try:
        model_path = "best50.pt"
        if not os.path.exists(model_path):
            st.error("Model file not found. Please upload best50.pt")
            return None
        model = YOLO(model_path)
        return model
    except Exception as e:
        st.error(f"Error loading model: {str(e)}")
        return None

# Load model
model = load_model()

class VideoProcessor:
    def __init__(self):
        self.model = model
        self.tablet_count = 0
        
    def recv(self, frame):
        global tablet_count_global
        
        img = frame.to_ndarray(format="bgr24")
        
        if self.model is not None:
            try:
                # Run inference
                results = self.model(img, conf=0.45, verbose=False)
                tablet_count = 0
                
                if results[0].boxes is not None:
                    tablet_count = len(results[0].boxes)
                    
                    # Draw bounding boxes
                    for i, box in enumerate(results[0].boxes.xyxy):
                        x1, y1, x2, y2 = map(int, box.cpu().numpy())
                        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(img, f"Tablet {i+1}", (x1, y1-10),
                                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                
                # Update global count thread-safely
                with lock:
                    tablet_count_global = tablet_count
                
                # Add count text
                cv2.putText(img, f"Tablets: {tablet_count}", (20, 40),
                           cv2.FONT_HERSHEY_SIMPLEX, 1.2, (0, 255, 0), 3)
                           
            except Exception as e:
                cv2.putText(img, f"Error: {str(e)[:30]}", (20, 40),
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# Streamlit UI
st.title("ðŸŽ¥ Live Tablet Counter with WebRTC")
st.write("This app works on both local and cloud deployments!")

# Model upload
if model is None:
    uploaded_model = st.file_uploader("Upload your model file (best50.pt)", type=["pt"])
    if uploaded_model is not None:
        with open("best50.pt", "wb") as f:
            f.write(uploaded_model.getbuffer())
        st.success("Model uploaded! Please refresh the page.")
        st.rerun()

if model is not None:
    st.success("âœ… Model loaded successfully!")
    
    # WebRTC streamer
    webrtc_ctx = webrtc_streamer(
        key="tablet-counter",
        mode=WebRtcMode.SENDRECV,
        rtc_configuration=RTC_CONFIGURATION,
        video_processor_factory=VideoProcessor,
        media_stream_constraints={"video": True, "audio": False},
        async_processing=True,
    )
    
    # Display current count
    count_placeholder = st.empty()
    
    # Real-time count display
    if webrtc_ctx.state.playing:
        while webrtc_ctx.state.playing:
            with lock:
                current_count = tablet_count_global
            count_placeholder.metric("Current Tablet Count", current_count)
            import time
            time.sleep(0.5)  # Update every 500ms
    
    st.markdown("---")
    st.markdown("### Instructions:")
    st.markdown("""
    1. **Allow camera access** when prompted by your browser
    2. **Point your camera** at the tablets you want to count
    3. **View real-time detection** with bounding boxes
    4. **See live count** updates below the video stream
    """)
    
else:
    st.warning("Please upload your YOLO model file to start counting tablets.")

st.markdown("---")
st.markdown("### Deployment Info:")
st.markdown("""
- âœ… **Works on Streamlit Cloud** (shared with others)
- âœ… **Works locally** 
- âœ… **Real-time webcam processing**
- âœ… **Multiple users can access simultaneously**
""")
